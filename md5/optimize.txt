[root@VM_14_30_centos ~/test_case/md5]# objdump -s -j .comment main

main:     file format elf64-x86-64

Contents of section .comment:
0000 4743433a 2028474e 55292034 2e382e35  GCC: (GNU) 4.8.5
0010 20323031 35303632 33202852 65642048   20150623 (Red H
0020 61742034 2e382e35 2d342900           at 4.8.5-4).   

/*strip -R .comment main*/


/*把int数组转换为char数组，减少.rodata节的大小*/
There are 22 section headers, starting at offset 0x2110:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000400238  00000238
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .dynsym           DYNSYM           00000000004002b8  000002b8
       00000000000000f0  0000000000000018   A       3     1     8
  [ 3] .dynstr           STRTAB           00000000004003a8  000003a8
       0000000000000062  0000000000000000   A       0     0     1
  [ 4] .gnu.version      VERSYM           000000000040040a  0000040a
       0000000000000014  0000000000000002   A       2     0     2
  [ 5] .gnu.version_r    VERNEED          0000000000400420  00000420
       0000000000000020  0000000000000000   A       3     1     8
  [ 6] .rela.dyn         RELA             0000000000400440  00000440
       0000000000000018  0000000000000018   A       2     0     8
  [ 7] .rela.plt         RELA             0000000000400458  00000458
       00000000000000d8  0000000000000018   A       2     9     8
  [ 8] .init             PROGBITS         0000000000400530  00000530
       000000000000001a  0000000000000000  AX       0     0     4
  [ 9] .plt              PROGBITS         0000000000400550  00000550
       00000000000000a0  0000000000000010  AX       0     0     16
  [10] .text             PROGBITS         00000000004005f0  000005f0
       0000000000000420  0000000000000000  AX       0     0     16
  [11] .fini             PROGBITS         0000000000400a10  00000a10
       0000000000000009  0000000000000000  AX       0     0     4
  [12] .rodata           PROGBITS         0000000000400a20  00000a20
       00000000000001d0  0000000000000000   A       0     0     16
  [13] .init_array       INIT_ARRAY       0000000000601e10  00001e10
       0000000000000008  0000000000000000  WA       0     0     8
  [14] .fini_array       FINI_ARRAY       0000000000601e18  00001e18
       0000000000000008  0000000000000000  WA       0     0     8
  [15] .jcr              PROGBITS         0000000000601e20  00001e20
       0000000000000008  0000000000000000  WA       0     0     8
  [16] .dynamic          DYNAMIC          0000000000601e28  00001e28
       00000000000001d0  0000000000000010  WA       3     0     8
  [17] .got              PROGBITS         0000000000601ff8  00001ff8
       0000000000000008  0000000000000008  WA       0     0     8
  [18] .got.plt          PROGBITS         0000000000602000  00002000
       0000000000000060  0000000000000008  WA       0     0     8
  [19] .data             PROGBITS         0000000000602060  00002060
       0000000000000004  0000000000000000  WA       0     0     4
  [20] .bss              NOBITS           0000000000602070  00002064
       0000000000003c30  0000000000000000  WA       0     0     16
  [21] .shstrtab         STRTAB           0000000000000000  00002064
       00000000000000ac  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

/*使用int数组时.rodata节的大小*/
There are 22 section headers, starting at offset 0x2110:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000400238  00000238
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .dynsym           DYNSYM           00000000004002b8  000002b8
       00000000000000f0  0000000000000018   A       3     1     8
  [ 3] .dynstr           STRTAB           00000000004003a8  000003a8
       0000000000000062  0000000000000000   A       0     0     1
  [ 4] .gnu.version      VERSYM           000000000040040a  0000040a
       0000000000000014  0000000000000002   A       2     0     2
  [ 5] .gnu.version_r    VERNEED          0000000000400420  00000420
       0000000000000020  0000000000000000   A       3     1     8
  [ 6] .rela.dyn         RELA             0000000000400440  00000440
       0000000000000018  0000000000000018   A       2     0     8
  [ 7] .rela.plt         RELA             0000000000400458  00000458
       00000000000000d8  0000000000000018   A       2     9     8
  [ 8] .init             PROGBITS         0000000000400530  00000530
       000000000000001a  0000000000000000  AX       0     0     4
  [ 9] .plt              PROGBITS         0000000000400550  00000550
       00000000000000a0  0000000000000010  AX       0     0     16
  [10] .text             PROGBITS         00000000004005f0  000005f0
       0000000000000420  0000000000000000  AX       0     0     16
  [11] .fini             PROGBITS         0000000000400a10  00000a10
       0000000000000009  0000000000000000  AX       0     0     4
  [12] .rodata           PROGBITS         0000000000400a20  00000a20
       0000000000000290  0000000000000000   A       0     0     16
  [13] .init_array       INIT_ARRAY       0000000000601e10  00001e10
       0000000000000008  0000000000000000  WA       0     0     8
  [14] .fini_array       FINI_ARRAY       0000000000601e18  00001e18
       0000000000000008  0000000000000000  WA       0     0     8
  [15] .jcr              PROGBITS         0000000000601e20  00001e20
       0000000000000008  0000000000000000  WA       0     0     8
  [16] .dynamic          DYNAMIC          0000000000601e28  00001e28
       00000000000001d0  0000000000000010  WA       3     0     8
  [17] .got              PROGBITS         0000000000601ff8  00001ff8
       0000000000000008  0000000000000008  WA       0     0     8
  [18] .got.plt          PROGBITS         0000000000602000  00002000
       0000000000000060  0000000000000008  WA       0     0     8
  [19] .data             PROGBITS         0000000000602060  00002060
       0000000000000004  0000000000000000  WA       0     0     4
  [20] .bss              NOBITS           0000000000602070  00002064
       0000000000003c30  0000000000000000  WA       0     0     16
  [21] .shstrtab         STRTAB           0000000000000000  00002064
       00000000000000ac  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

/*减少.rodata节后，文件体积却没有减小，可以看到.rodata后面的节在文件中偏移也没有改变*/
0000a20 0001 0002 0000 0000 0000 0000 0000 0000
0000a30 702f 6f72 2f63 6425 652f 6578 2500 3230
0000a40 2578 3230 2578 3230 2578 3230 0078 0000
0000a50 0007 0000 000c 0000 0011 0000 0016 0000
*
0000a90 0005 0000 0009 0000 000e 0000 0014 0000
*
0000ad0 0004 0000 000b 0000 0010 0000 0017 0000
*
0000b10 0006 0000 000a 0000 000f 0000 0015 0000
*
0000b50 0100 0302 0504 0706 0908 0b0a 0d0c 0f0e
0000b60 0601 000b 0a05 040f 0e09 0803 020d 0c07
0000b70 0805 0e0b 0401 0a07 000d 0603 0c09 020f
0000b80 0700 050e 030c 010a 0f08 0d06 0b04 0902
0000b90 a478 d76a b756 e8c7 70db 2420 ceee c1bd
0000ba0 0faf f57c c62a 4787 4613 a830 9501 fd46
0000bb0 98d8 6980 f7af 8b44 5bb1 ffff d7be 895c
0000bc0 1122 6b90 7193 fd98 438e a679 0821 49b4
0000bd0 2562 f61e b340 c040 5a51 265e c7aa e9b6
0000be0 105d d62f 1453 0244 e681 d8a1 fbc8 e7d3
0000bf0 cde6 21e1 07d6 c337 0d87 f4d5 14ed 455a
0000c00 e905 a9e3 a3f8 fcef 02d9 676f 4c8a 8d2a
0000c10 3942 fffa f681 8771 6122 6d9d 380c fde5
0000c20 ea44 a4be cfa9 4bde 4b60 f6bb bc70 bebf
0000c30 7ec6 289b 27fa eaa1 3085 d4ef 1d05 0488
0000c40 d039 d9d4 99e5 e6db 7cf8 1fa2 5665 c4ac
0000c50 2244 f429 ff97 432a 23a7 ab94 a039 fc93
0000c60 59c3 655b cc92 8f0c f47d ffef 5dd1 8584
0000c70 7e4f 6fa8 e6e0 fe2c 4314 a301 11a1 4e08
0000c80 7e82 f753 f235 bd3a d2bb 2ad7 d391 eb86
0000c90 0850 0040 0000 0000 0859 0040 0000 0000
0000ca0 0862 0040 0000 0000 0869 0040 0000 0000
0000cb0 0000 0000 0000 0000 0000 0000 0000 0000
*
0001e10
/*hexdump查看发现.rodata和.init_array节之间填充了很多个零字节*/
Elf file type is EXEC (Executable file)
Entry point 0x400780
There are 8 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000400040 0x0000000000400040
                 0x00000000000001c0 0x00000000000001c0  R E    8
  INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238
                 0x000000000000001c 0x000000000000001c  R      1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
                 0x0000000000000c00 0x0000000000000c00  R E    200000
  LOAD           0x0000000000001de0 0x0000000000601de0 0x0000000000601de0
                 0x0000000000000284 0x0000000000003ec0  RW     200000
  DYNAMIC        0x0000000000001e20 0x0000000000601e20 0x0000000000601e20
                 0x00000000000001d0 0x00000000000001d0  RW     8
  NOTE           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  R      8
  GNU_EH_FRAME   0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  R      8
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     8

 Section to Segment mapping:
  Segment Sections...
   00     
   01     .interp 
   02     .interp .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .text .fini .rodata 
   03     .init_array .fini_array .jcr .data.rel.ro .dynamic .got .got.plt .data .bss 
   04     .dynamic 
   05     
   06     
   07     



+ gcc -v main.c -fPIC -Os -o main
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper
Target: x86_64-redhat-linux
Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux
Thread model: posix
gcc version 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) 
	COLLECT_GCC_OPTIONS='-v' '-fPIC' '-Os' '-o' 'main' '-mtune=generic' '-march=x86-64'
	 /usr/libexec/gcc/x86_64-redhat-linux/4.8.5/cc1 -quiet -v main.c -quiet -dumpbase main.c -mtune=generic -march=x86-64 -auxbase main -Os -version -fPIC -o /tmp/ccrNAfUZ.s
	 GNU C (GCC) version 4.8.5 20150623 (Red Hat 4.8.5-4) (x86_64-redhat-linux)
	        compiled by GNU C version 4.8.5 20150623 (Red Hat 4.8.5-4), GMP version 5.1.1, MPFR version 3.1.1, MPC version 1.0.1
			warning: GMP header version 5.1.1 differs from library version 6.0.0.
			GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
			ignoring nonexistent directory "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include-fixed"
			ignoring nonexistent directory "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../x86_64-redhat-linux/include"
#include "..." search starts here:
#include <...> search starts here:
			 /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include
			  /usr/local/include
			   /usr/include
			   End of search list.
			   GNU C (GCC) version 4.8.5 20150623 (Red Hat 4.8.5-4) (x86_64-redhat-linux)
	        compiled by GNU C version 4.8.5 20150623 (Red Hat 4.8.5-4), GMP version 5.1.1, MPFR version 3.1.1, MPC version 1.0.1
			warning: GMP header version 5.1.1 differs from library version 6.0.0.
			GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
			Compiler executable checksum: 9056de5093e628ed35cebee7490512f3
			COLLECT_GCC_OPTIONS='-v' '-fPIC' '-Os' '-o' 'main' '-mtune=generic' '-march=x86-64'
			 as -v --64 -o /tmp/ccQGHFg7.o /tmp/ccrNAfUZ.s
			 GNU assembler version 2.23.52.0.1 (x86_64-redhat-linux) using BFD version version 2.23.52.0.1-55.el7 20130226
			 COMPILER_PATH=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/:/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/:/usr/libexec/gcc/x86_64-redhat-linux/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/:/usr/lib/gcc/x86_64-redhat-linux/
			 LIBRARY_PATH=/usr/lib/gcc/x86_64-redhat-linux/4.8.5/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../:/lib/:/usr/lib/
			 COLLECT_GCC_OPTIONS='-v' '-fPIC' '-Os' '-o' 'main' '-mtune=generic' '-march=x86-64'
			  /usr/libexec/gcc/x86_64-redhat-linux/4.8.5/collect2 --build-id --no-add-needed --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o main /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crti.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtbegin.o -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../.. /tmp/ccQGHFg7.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtend.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crtn.o


/*开启-v查看gcc会默认连接crtbegin.o crtend.o，这两个文件用于c++构造和析构函数，因此不需要链接，修改编译脚本编译时不再连接这两个文件*/
/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/cc1 -quiet -v main.c -quiet -dumpbase main.c -mtune=generic -march=x86-64 -auxbase main -Os -version -o /tmp/ccVvtbNu.s
as -v --64 -o /tmp/ccAYgYY2.o /tmp/ccVvtbNu.s
/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/collect2 --build-id --no-add-needed --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o main /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crti.o -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../.. /tmp/ccAYgYY2.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crtn.o


/*把section表去除掉，程序执行时不需要该表*/
sstrip ./main


/*collect2添加--verbose查看具体链接过程，可以看到使用的链接脚本如下*/
GNU ld version 2.23.52.0.1-55.el7 20130226
  Supported emulations:
   elf_x86_64
   elf32_x86_64
   elf_i386
   i386linux
   elf_l1om
   elf_k1om
using internal linker script:
==================================================
/* Script for -z combreloc: combine and sort reloc sections */
OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
	      "elf64-x86-64")
OUTPUT_ARCH(i386:x86-64)
ENTRY(_start)
SEARCH_DIR("/usr/x86_64-redhat-linux/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-redhat-linux/lib"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
SECTIONS
{
  /* Read-only sections, merged into text segment: */
  PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
  .interp         : { *(.interp) }
  .note.gnu.build-id : { *(.note.gnu.build-id) }
  .hash           : { *(.hash) }
  .gnu.hash       : { *(.gnu.hash) }
  .dynsym         : { *(.dynsym) }
  .dynstr         : { *(.dynstr) }
  .gnu.version    : { *(.gnu.version) }
  .gnu.version_d  : { *(.gnu.version_d) }
  .gnu.version_r  : { *(.gnu.version_r) }
  .rela.dyn       :
    {
      *(.rela.init)
      *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
      *(.rela.fini)
      *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
      *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
      *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
      *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
      *(.rela.ctors)
      *(.rela.dtors)
      *(.rela.got)
      *(.rela.sharable_data .rela.sharable_data.* .rela.gnu.linkonce.shrd.*)
      *(.rela.sharable_bss .rela.sharable_bss.* .rela.gnu.linkonce.shrb.*)
      *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
      *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
      *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
      *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
      *(.rela.ifunc)
    }
  .rela.plt       :
    {
      *(.rela.plt)
      PROVIDE_HIDDEN (__rela_iplt_start = .);
      *(.rela.iplt)
      PROVIDE_HIDDEN (__rela_iplt_end = .);
    }
  .init           :
  {
    KEEP (*(SORT_NONE(.init)))
  }
  .plt            : { *(.plt) *(.iplt) }
  .text           :
  {
    *(.text.unlikely .text.*_unlikely)
    *(.text.exit .text.exit.*)
    *(.text.startup .text.startup.*)
    *(.text.hot .text.hot.*)
    *(.text .stub .text.* .gnu.linkonce.t.*)
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
  }
  .fini           :
  {
    KEEP (*(SORT_NONE(.fini)))
  }
  PROVIDE (__etext = .);
  PROVIDE (_etext = .);
  PROVIDE (etext = .);
  .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
  .rodata1        : { *(.rodata1) }
  .eh_frame_hdr : { *(.eh_frame_hdr) }
  .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) }
  .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
  .gcc_except_table.*) }
  /* These sections are generated by the Sun/Oracle C++ compiler.  */
  .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
  .exception_ranges*) }
  /* Adjust the address for the data segment.  We want to adjust up to
     the same address within the page on the next page up.  */
  . = ALIGN (CONSTANT (MAXPAGESIZE)) - ((CONSTANT (MAXPAGESIZE) - .) & (CONSTANT (MAXPAGESIZE) - 1)); . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
  /* Exception handling  */
  .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) }
  .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
  .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
  /* Thread Local Storage sections  */
  .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
  .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  }
  .init_array     :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
    KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
    PROVIDE_HIDDEN (__init_array_end = .);
  }
  .fini_array     :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
    KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
    PROVIDE_HIDDEN (__fini_array_end = .);
  }
  .ctors          :
  {
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*crtbegin?.o(.ctors))
    /* We don't want to include the .ctor section from
       the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
  }
  .dtors          :
  {
    KEEP (*crtbegin.o(.dtors))
    KEEP (*crtbegin?.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
  }
  .jcr            : { KEEP (*(.jcr)) }
  .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
  .dynamic        : { *(.dynamic) }
  .got            : { *(.got) *(.igot) }
  . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
  .got.plt        : { *(.got.plt)  *(.igot.plt) }
  .data           :
  {
    *(.data .data.* .gnu.linkonce.d.*)
    SORT(CONSTRUCTORS)
  }
  .data1          : { *(.data1) }
  /* Sharable data sections.  */
  .sharable_data   : ALIGN(CONSTANT (MAXPAGESIZE))
  {
    PROVIDE_HIDDEN (__sharable_data_start = .);
    *(.sharable_data .sharable_data.* .gnu.linkonce.shrd.*)
    /* Align here to ensure that the sharable data section ends at the
       page boundary.  */
    . = ALIGN(. != 0 ? CONSTANT (MAXPAGESIZE) : 1);
    PROVIDE_HIDDEN (__sharable_data_end = .);
  }
  _edata = .; PROVIDE (edata = .);
  . = .;
  __bss_start = .;
  .bss            :
  {
   *(.dynbss)
   *(.bss .bss.* .gnu.linkonce.b.*)
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.
      FIXME: Why do we need it? When there is no .bss section, we don't
      pad the .data section.  */
   . = ALIGN(. != 0 ? 64 / 8 : 1);
  }
  /* Sharable bss sections  */
  .sharable_bss   : ALIGN(CONSTANT (MAXPAGESIZE))
  {
    PROVIDE_HIDDEN (__sharable_bss_start = .);
    *(.dynsharablebss)
    *(.sharable_bss .sharable_bss.* .gnu.linkonce.shrb.*)
    *(SHARABLE_COMMON)
    /* Align here to ensure that the sharable bss section ends at the
       page boundary.  */
    . = ALIGN(. != 0 ? CONSTANT (MAXPAGESIZE) : 1);
    PROVIDE_HIDDEN (__sharable_bss_end = .);
  }
  .lbss   :
  {
    *(.dynlbss)
    *(.lbss .lbss.* .gnu.linkonce.lb.*)
    *(LARGE_COMMON)
  }
  . = ALIGN(64 / 8);
  . = SEGMENT_START("ldata-segment", .);
  .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
  {
    *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
  }
  .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
  {
    *(.ldata .ldata.* .gnu.linkonce.l.*)
    . = ALIGN(. != 0 ? 64 / 8 : 1);
  }
  . = ALIGN(64 / 8);
  _end = .; PROVIDE (end = .);
  . = DATA_SEGMENT_END (.);
  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment       0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }
  /* DWARF Extension.  */
  .debug_macro    0 : { *(.debug_macro) }
  .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
  /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) *(.gnu_object_only) }
}


==================================================
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o succeeded
/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crti.o succeeded
/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crti.o
attempt to open /tmp/ccAYgYY2.o succeeded
/tmp/ccAYgYY2.o
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc.so failed
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc.a succeeded
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so succeeded
-lgcc_s (/usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so)
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libc.so failed
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libc.a failed
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/libc.so succeeded
opened script file /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/libc.so
opened script file /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/libc.so
attempt to open /lib64/libc.so.6 succeeded
/lib64/libc.so.6
attempt to open /usr/lib64/libc_nonshared.a succeeded
(/usr/lib64/libc_nonshared.a)elf-init.oS
(/usr/lib64/libc_nonshared.a)stat.oS
attempt to open /lib64/ld-linux-x86-64.so.2 succeeded
/lib64/ld-linux-x86-64.so.2
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc.so failed
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc.a succeeded
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so succeeded
-lgcc_s (/usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so)
attempt to open /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crtn.o succeeded
/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crtn.o
ld-linux-x86-64.so.2 needed by /lib64/libc.so.6
found ld-linux-x86-64.so.2 at /lib64/ld-linux-x86-64.so.2
/*ld --verbose*/

/*修改链接脚本，把ENTRY从_start设置为main，main中把return 0替换为_exit(0), 调用ld时通过-T指定链接脚本, 此时crt1.o crtn.o crti.o也不需要再链接到二进制里*/
/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/collect2 -T main.lds --build-id --no-add-needed --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o main -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../.. /tmp/ccAYgYY2.o -lgcc --as-needed -lgcc_s --no-as-needed -lc 


/*通过指定_attribute__属性把.rodata中数据放入.data段, 通过ld传递参数-z max-page-size=4096修改程序段对齐方式*/
	static unsigned char g[] __attribute__((section(".data"))) = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
								1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12,
								5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2,
								0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9};

	static unsigned int k[] __attribute__((section(".data"))) = {0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501, 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
								0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8, 0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
								0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70, 0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
								0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1, 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
	};

	static unsigned char shift[] __attribute__((section(".data"))) = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
									5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20,
									4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
									6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21
									};

/*可以看到此时已经没有.rodata段*/
There are 14 section headers, starting at offset 0x12a0:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000400238  00000238
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .dynsym           DYNSYM           0000000000400298  00000298
       00000000000000d8  0000000000000018   A       3     1     8
  [ 3] .dynstr           STRTAB           0000000000400370  00000370
       0000000000000047  0000000000000000   A       0     0     1
  [ 4] .gnu.version      VERSYM           00000000004003b8  000003b8
       0000000000000012  0000000000000002   A       2     0     2
  [ 5] .gnu.version_r    VERNEED          00000000004003d0  000003d0
       0000000000000020  0000000000000000   A       3     1     8
  [ 6] .rela.plt         RELA             00000000004003f0  000003f0
       00000000000000c0  0000000000000018   A       2     7     8
  [ 7] .plt              PROGBITS         00000000004004b0  000004b0
       0000000000000090  0000000000000010  AX       0     0     16
  [ 8] .text             PROGBITS         0000000000400540  00000540
       00000000000002e0  0000000000000000  AX       0     0     16
  [ 9] .dynamic          DYNAMIC          0000000000401ec0  00000ec0
       0000000000000140  0000000000000010  WA       3     0     8
  [10] .got.plt          PROGBITS         0000000000402000  00001000
       0000000000000058  0000000000000008  WA       0     0     8
  [11] .data             PROGBITS         0000000000402060  00001060
       00000000000001d0  0000000000000000  WA       0     0     16
  [12] .bss              NOBITS           0000000000402230  00001230
       0000000000003c20  0000000000000000  WA       0     0     16
  [13] .shstrtab         STRTAB           0000000000000000  00001230
       000000000000006c  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

/*可以看到段的对齐方式也修改为0x1000*/	
Elf file type is EXEC (Executable file)
Entry point 0x400540
There are 8 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000400040 0x0000000000400040
                 0x00000000000001c0 0x00000000000001c0  R E    8
  INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238
                 0x000000000000001c 0x000000000000001c  R      1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
                 0x0000000000000820 0x0000000000000820  R E    1000
  LOAD           0x0000000000000ec0 0x0000000000401ec0 0x0000000000401ec0
                 0x0000000000000370 0x0000000000003f90  RW     1000
  DYNAMIC        0x0000000000000ec0 0x0000000000401ec0 0x0000000000401ec0
                 0x0000000000000140 0x0000000000000140  RW     8
  NOTE           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  R      8
  GNU_EH_FRAME   0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  R      8
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     8

 Section to Segment mapping:
  Segment Sections...
   00     
   01     .interp 
   02     .interp .dynsym .dynstr .gnu.version .gnu.version_r .rela.plt .plt .text 
   03     .dynamic .got.plt .data .bss 
   04     .dynamic 
   05     
   06     
   07     


/*但是按照4k对齐，加载的两个段之间还是会有0字节填充，即.text节和.dynamic节之间还是有填充字节，对齐方式最小为4k，所以不同属性的段之间还是会存在空洞*/

/*把.data节中数据转换回.rodata，然后把.dynamic和.rodata节再次合并到.text所属的段中*/



There are 14 section headers, starting at offset 0x10c8:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000400200  00000200
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .dynsym           DYNSYM           0000000000400260  00000260
       00000000000000d8  0000000000000018   A       3     1     8
  [ 3] .dynstr           STRTAB           0000000000400338  00000338
       0000000000000047  0000000000000000   A       0     0     1
  [ 4] .gnu.version      VERSYM           0000000000400380  00000380
       0000000000000012  0000000000000002   A       2     0     2
  [ 5] .gnu.version_r    VERNEED          0000000000400398  00000398
       0000000000000020  0000000000000000   A       3     1     8
  [ 6] .dynamic          DYNAMIC          00000000004003b8  000003b8
       0000000000000140  0000000000000010  WA       3     0     8
  [ 7] .rela.plt         RELA             00000000004004f8  000004f8
       00000000000000c0  0000000000000018   A       2     8     8
  [ 8] .plt              PROGBITS         00000000004005c0  000005c0
       0000000000000090  0000000000000010  AX       0     0     16
  [ 9] .text             PROGBITS         0000000000400650  00000650
       00000000000002e0  0000000000000000  AX       0     0     16
  [10] .rodata           PROGBITS         0000000000400930  00000930
       00000000000001a0  0000000000000000   A       0     0     16
  [11] .got.plt          PROGBITS         0000000000402000  00001000
       0000000000000058  0000000000000008  WA       0     0     8
  [12] .bss              NOBITS           0000000000402060  00001058
       0000000000003c60  0000000000000000  WA       0     0     16
  [13] .shstrtab         STRTAB           0000000000000000  00001058
       000000000000006e  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)



/*此时只有.got.plt的58个字节，所以文件中.rodata和.got.plt中间依然存在空洞，考虑去除.got.plt。因为程序动态链接时ld会把函数地址写入.got.plt所以该节不能合并到.text段中*/

/*代码中去除了return直接调用了_exit，如果重定向输出会发现程序的输出不能正确输出到文件，因此在提交平台会验证错误*/
223 00000000004004f8 <.init>:
224   4004f8:   48 83 ec 08             sub    $0x8,%rsp
225   4004fc:   48 8b 05 f5 1a 00 00    mov    0x1af5(%rip),%rax        # 401ff8 <open@plt+0x1a58>
226   400503:   48 85 c0                test   %rax,%rax
227   400506:   74 05                   je     40050d <getpid@plt-0x23>
228   400508:   e8 73 00 00 00          callq  400580 <__gmon_start__@plt>
229   40050d:   48 83 c4 08             add    $0x8,%rsp
230   400511:   c3                      retq

/*标准输入、输出在执行main函数之前就已经被打开*/
/*把return还原*/
/*通过syscall来执行系统调用，减少.plt和.got.plt的大小。直接通过argv[0]获取可执行文件名称，不需要通过/proc获取，减少getpid调用*/
161     syscall(SYS_stat, filename, &st);
162     fd = syscall(SYS_open, filename, O_RDONLY);
163     syscall(SYS_read, fd, fileContent, st.st_size);

203     static unsigned char SECTION_VAR alpha[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8',
204                                 '9', 'a', 'b', 'c', 'd', 'e', 'f'};
205     getExeFile(argv[0]);
206     md5_calculate(&ctx);
207     md5 = (unsigned char*)ctx.hash;
208     while( i < 16 )
209     {
210         fileContent[2*i] = alpha[md5[i]>>4];
211         fileContent[2*i+1] = alpha[md5[i]&0xf];
212         i++;
213     }
214     fileContent[2*i] = '\n';
215     syscall(SYS_write, 1, fileContent, 33);


/*.plt和.got.plt的体积减小，其中只包含了syscall的重定向目录项，继续考虑使用内联汇编把syscall的引用也去掉*/
/*32位系统使用int 0x80进入系统调用，64位系统使用syscall指令进入系统调用*/
165     asm volatile("movq %0, %%rax;"
166             "movq %1, %%rdi;"
167             "movq %2, %%rsi;"
168             "syscall;"
169             :
170             :"r"((unsigned long long)4), "r"(filename), "r"(&st)
171             :"%rax", "%rdi", "%rsi", "%rcx");
172     //syscall(SYS_stat, filename, &st);
173     fileContentLen = st.st_size;
174 
175     asm volatile("movq %1, %%rax;"
176             "movq %2, %%rdi;"
177             "movq %3, %%rsi;"
178             "movq %4, %%rdx;"
179             "syscall;"
180             "movl %%eax, %0;"
181             :"=r"(fd)
182             :"r"((unsigned long long)2), "r"(filename), "r"((unsigned long long)0), "r"((unsigned long long)0)
183             :"%rax", "%rdi", "%rsi", "%rdx");
184     //fd = syscall(SYS_open, filename, O_RDONLY);
185 
186     asm volatile("movq %0, %%rax;"
187             "movq %1, %%rdi;"
188             "movq %2, %%rsi;"
189             "movq %3, %%rdx;"
190             "syscall;"
191             :
192             :"r"((unsigned long long)0), "r"((unsigned long long)fd), "r"(fileContent), "r"((unsigned long long)st.st_size)
193             :"%rax", "%rdi", "%rsi", "%rdx");
194     //syscall(SYS_read, fd, fileContent, st.st_size);

/*使用内联汇编后会产生堆栈，gdb跟踪调试发现执行stat和read系统调用时产生的汇编代码会修改rcx寄存器，导致后续系统调用参数赋值时出现脏数据，因此在
 会影响到的寄存器中加入"%rcx"*/

(gdb) disassemble 
Dump of assembler code for function getExeFile:
	0x0000000000400686 <+0>:     sub    $0x98,%rsp
	0x000000000040068d <+7>:     mov    %rdi,%rcx
	0x0000000000400690 <+10>:    mov    $0x4,%edx
	0x0000000000400695 <+15>:    mov    %rdx,%rax
	0x0000000000400698 <+18>:    mov    %rcx,%rdi
	0x000000000040069b <+21>:    mov    %rsp,%rsi
	0x000000000040069e <+24>:    syscall 
	=> 0x00000000004006a0 <+26>:    mov    $0x2,%edi
	0x00000000004006a5 <+31>:    mov    %rcx,%rsi
	0x00000000004006a8 <+34>:    xor    %dl,%dl
	0x00000000004006aa <+36>:    xor    %eax,%eax
	0x00000000004006ac <+38>:    callq  0x400420 <syscall@plt>
	0x00000000004006b1 <+43>:    mov    0x30(%rsp),%rsi
	0x00000000004006b6 <+48>:    mov    $0x402050,%edx
	0x00000000004006bb <+53>:    xor    %edi,%edi
	0x00000000004006bd <+55>:    lea    0x1(%rsi),%rcx
	0x00000000004006c1 <+59>:    mov    %eax,%esi
	0x00000000004006c3 <+61>:    xor    %eax,%eax
	0x00000000004006c5 <+63>:    callq  0x400420 <syscall@plt>
	0x00000000004006ca <+68>:    mov    0x30(%rsp),%rax
	0x00000000004006cf <+73>:    mov    %eax,0x196b(%rip)        # 0x402040 <fileContentLen>
	0x00000000004006d5 <+79>:    add    $0x98,%rsp
	0x00000000004006dc <+86>:    retq   
	End of assembler dump.
	(gdb) print $rcx
	$7 = -1

/*可以看到.plt中只有两个需要动态重定位的符号*/	
16 Disassembly of section .plt:
17 
18 00000000004003d0 <__libc_start_main@plt-0x10>:
19   4003d0:   ff 35 32 1c 00 00       pushq  0x1c32(%rip)        # 402008 <__gmon_start__@plt+0x1c18>
20   4003d6:   ff 25 34 1c 00 00       jmpq   *0x1c34(%rip)        # 402010 <__gmon_start__@plt+0x1c20>
21   4003dc:   0f 1f 40 00             nopl   0x0(%rax)
22 
23 00000000004003e0 <__libc_start_main@plt>:
24   4003e0:   ff 25 32 1c 00 00       jmpq   *0x1c32(%rip)        # 402018 <__gmon_start__@plt+0x1c28>
25   4003e6:   68 00 00 00 00          pushq  $0x0
26   4003eb:   e9 e0 ff ff ff          jmpq   4003d0 <__libc_start_main@plt-0x10>
27 
28 00000000004003f0 <__gmon_start__@plt>:
29   4003f0:   ff 25 2a 1c 00 00       jmpq   *0x1c2a(%rip)        # 402020 <__gmon_start__@plt+0x1c30>
30   4003f6:   68 01 00 00 00          pushq  $0x1
31   4003fb:   e9 d0 ff ff ff          jmpq   4003d0 <__libc_start_main@plt-0x10>

[root@VM_14_30_centos ~/test_case/md5]# readelf -r main

Relocation section '.rela.dyn' at offset 0x360 contains 1 entries:
Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000401ff8  000200000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0

Relocation section '.rela.plt' at offset 0x378 contains 2 entries:
Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000402018  000100000007 R_X86_64_JUMP_SLO 0000000000000000 __libc_start_main + 0
000000402020  000200000007 R_X86_64_JUMP_SLO 0000000000000000 __gmon_start__ + 0
[root@VM_14_30_centos ~/test_case/md5]# objdump -s -j .got.plt main

main:     file format elf64-x86-64

Contents of section .got.plt:
402000 681e4000 00000000 00000000 00000000  h.@.............
402010 00000000 00000000 e6034000 00000000  ..........@.....
402020 f6034000 00000000                    ..@.....   


/*使用自定义链接脚本，入口函数改为main，去掉对运行时库的符号引用，同时去掉对_exit()的调用改为直接系统调用sys_exit*/

Elf file type is EXEC (Executable file)
Entry point 0x400340
There are 8 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000400040 0x0000000000400040
                 0x00000000000001c0 0x00000000000001c0  R E    8
  INTERP         0x0000000000000200 0x0000000000400200 0x0000000000400200
                 0x000000000000001c 0x000000000000001c  R      1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
                 0x0000000000000780 0x0000000000000780  RWE    1000
  LOAD           0x0000000000001000 0x0000000000402000 0x0000000000402000
                 0x0000000000000000 0x0000000000004010  RW     1000
  DYNAMIC        0x0000000000000270 0x0000000000400270 0x0000000000400270
                 0x00000000000000d0 0x00000000000000d0  RW     8
  NOTE           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  R      8
  GNU_EH_FRAME   0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  R      8
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     8

 Section to Segment mapping:
  Segment Sections...
   00     
   01     .interp 
   02     .interp .dynsym .dynstr .dynamic .text .rodata 
   03     .bss 
   04     .dynamic 
   05     
   06     
   07     

/*可以看到加载的段还是两个，但是第二段只有.bss节，该节并不占用文件大小。同时文件中也不包含需要重定位的符号了*/

[root@VM_14_30_centos ~/test_case/md5]# readelf -r main

There are no relocations in this file.

There are 9 section headers, starting at offset 0x880:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000400200  00000200
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .dynsym           DYNSYM           0000000000400260  00000260
       0000000000000000  0000000000000018   A       3     0     8
  [ 3] .dynstr           STRTAB           0000000000400260  00000260
       000000000000000b  0000000000000000   A       0     0     1
  [ 4] .dynamic          DYNAMIC          0000000000400270  00000270
       00000000000000d0  0000000000000010  WA       3     0     8
  [ 5] .text             PROGBITS         0000000000400340  00000340
       000000000000034c  0000000000000000  AX       0     0     4
  [ 6] .rodata           PROGBITS         0000000000400690  00000690
       00000000000001b0  0000000000000000   A       0     0     16
  [ 7] .bss              NOBITS           0000000000402000  00001000
       0000000000004040  0000000000000000  WA       0     0     16
  [ 8] .shstrtab         STRTAB           0000000000000000  00000840
       000000000000003f  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

/*查看文件大小*/
-rwxr-xr-x 1 root root 2752 Apr 20 17:38 main
/*查看依赖的动态库*/
	not a dynamic executable


/**/

[root@VM_14_30_centos ~/test_case/md5/tool]# objdump -d crt1.o
crt1.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <_start>:
   0:	31 ed                	xor    %ebp,%ebp
   2:	49 89 d1             	mov    %rdx,%r9
   5:	5e                   	pop    %rsi
   6:	48 89 e2             	mov    %rsp,%rdx
   9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
   d:	50                   	push   %rax
   e:	54                   	push   %rsp
   f:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8
  16:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
  1d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  24:	e8 00 00 00 00       	callq  29 <_start+0x29>
  29:	f4                   	hlt    
  2a:	66 90                	xchg   %ax,%ax

/*_init函数和_fini的起始部分在crti.o中*/
[root@VM_14_30_centos ~/test_case/md5/tool]# objdump -d crti.o
crti.o:     file format elf64-x86-64


Disassembly of section .init:

0000000000000000 <_init>:
   0:	48 83 ec 08          	sub    $0x8,%rsp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_init+0xb>
   b:	48 85 c0             	test   %rax,%rax
   e:	74 05                	je     15 <_init+0x15>
  10:	e8 00 00 00 00       	callq  15 <_init+0x15>

Disassembly of section .fini:

0000000000000000 <_fini>:
   0:	48 83 ec 08          	sub    $0x8,%rsp

/*_init函数和_fini的结束部分在crti.o中*/
[root@VM_14_30_centos ~/test_case/md5/tool]# objdump -d crtn.o
crtn.o:     file format elf64-x86-64


Disassembly of section .init:

0000000000000000 <.init>:
   0:	48 83 c4 08          	add    $0x8,%rsp
   4:	c3                   	retq   

Disassembly of section .fini:

0000000000000000 <.fini>:
   0:	48 83 c4 08          	add    $0x8,%rsp
   4:	c3                   	retq  


--omagic
    Set the text and data sections to be readable and writable. Also, do not page-align the data segment. If the output format supports Unix style magic numbers, mark the output as OMAGIC.

/*1、把指令填充到文件头空闲处，通过jmp指令连接
  2、通过汇编实现
  3、提前计算文件每64字节数据块的MD5并存储到文件末尾直接使用，填充部分放到程序里计算或者编译时计算，需要通过汇编控制
  4、通过sse指令优化MD5计算
  5、通过fsin指令优化MD5计算
  6、可以直接通过读取加载到内存的镜像计算MD5，需要汇编保证加载到内存和镜像和文件保持一致

 */
